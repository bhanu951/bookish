<?php

/**
 * @file
 * Hook implementations for bookish_admin.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\file\FileInterface;
use Drupal\lunr\LunrSearchInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_page_top().
 */
function bookish_admin_page_top(array &$page_top) {
  $page_top['bookish_toolbar'] = [
    '#type' => 'sfc',
    '#component_id' => 'bookish_toolbar',
    '#access' => \Drupal::currentUser()->hasPermission('administer site configuration'),
    '#cache' => [
      'contexts' => ['user'],
    ],
  ];
}

/**
 * Implements hook_entity_base_field_info().
 */
function bookish_admin_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'file') {
    $fields['bookish_image_data'] = BaseFieldDefinition::create('string_long')
      ->setLabel(t('Image data'))
      ->setDescription(t('Image data related to bookish admin.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(FALSE)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }

  return $fields;
}


/**
 * Implements hook_entity_insert().
 *
 * @see focal_point_entity_update
 */
function bookish_admin_entity_insert(EntityInterface $entity) {
  bookish_admin_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function bookish_admin_entity_update(EntityInterface $entity) {
  if ($entity instanceof FieldableEntityInterface) {
    foreach ($entity->getFieldDefinitions() as $field) {
      if ($field->getType() === 'image' && $entity->hasField($field->getName())) {
        foreach ($entity->{$field->getName()} as $item) {
          if (!$item->entity instanceof FileInterface) {
            continue;
          }
          if (!isset($item->bookish_image)) {
            continue;
          }
          $data = json_decode($item->entity->bookish_image_data->getString(), TRUE);
          $new_data = $item->bookish_image['bookish_image_data'];
          $data = array_merge(_bookish_admin_coerce_data($data), _bookish_admin_coerce_data($new_data));
          $item->entity->bookish_image_data = json_encode($data);
          $item->entity->save();
          _bookish_admin_flush_image_styles($item->entity->getFileUri());  
        }
      }
    }
  }
}

function _bookish_admin_flush_image_styles($uri) {
  if (empty($uri)) {
    return;
  }
  /** @var \Drupal\image\ImageStyleInterface[] $image_styles */
  $image_styles = \Drupal::entityTypeManager()->getStorage('image_style')->loadMultiple();
  foreach ($image_styles as $image_style) {
    $image_style->flush($uri);
  }
}

function bookish_admin_form_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['library'][] = 'bookish_admin/node_form';
}

function _bookish_admin_coerce_data($data) {
  if (!is_array($data)) {
    return [];
  }
  foreach ($data as $key => &$value) {
    if ($key === 'focal_point') {
      if (!is_array($value)) {
        $value = explode(',', $value);
      }
      if (count($value) < 2) {
        $value = [0,0];
      }
      $value = array_map('intval', $value);
    } else {
      $value = (int) $value;
    }
  }
  return $data;
}

/**
 * Implements hook_lunr_search_page_alter().
 */
function bookish_admin_lunr_search_page_alter(array &$build, LunrSearchInterface $lunr_search) {
  if ($lunr_search->id() === 'default') {
    $terms = Term::loadMultiple();
    $build['form']['tags_container'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['bookish-search-tags']],
      '#attached' => [
        'drupalSettings' => [
          'lunrOperators' => ['field_tags' => 'OR'],
        ],
      ],
      '#weight' => 2,
      'label' => [
        '#markup' => '<div class="bookish-search-tags-label">' . t('Tags') . '</div>',
      ],
    ];
    foreach ($terms as $id => $term) {
      $build['form']['tags_container']['tags'][$term->label()] = [
        '#type' => 'checkbox',
        '#title' => $term->label(),
        '#return_value' => $term->label(),
        '#attributes' => [
          'data-lunr-search-field' => 'field_tags',
          'data-lunr-auto-submit' => 1,
          'class' => ['visually-hidden'],
        ],
        '#id' => 'bookish-search-tag-' . $id,
      ];
    }
    ksort($build['form']['tags_container']['tags']);
  }
}

/**
 * Implements hook_token_info().
 */
function bookish_admin_token_info() {
  $info = [];

  $info['types']['bookish'] = [
    'name' => t('Bookish'),
    'description' => t('Bookish tokens')
  ];

  $info['tokens']['bookish']['social_node'] = [
    'name' => t('Default social node'),
    'description' => t('The node ("social_node") that contains the default site description and image.'),
    'type' => 'node',
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function bookish_admin_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
    $replacements = [];

    if ($type !== 'bookish') {
      return $replacements;
    }

    if ($tokens = \Drupal::token()->findWithPrefix($tokens, 'social_node')) {
      $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
        'title' => 'social_node',
      ]);
      if (empty($nodes)) {
        return $replacements;
      }
      $node = reset($nodes);
      $replacements += \Drupal::token()->generate('node', $tokens, ['node' => $node], $options, $bubbleable_metadata);
    }

    return $replacements;

}
